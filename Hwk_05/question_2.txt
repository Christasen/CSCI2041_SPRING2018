Guangyu Yan
yanxx630


foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)

foldl f v [] = v
foldl f v (x::xs) = foldl f (f v x) xs

and b1 b2 = if b1 then b2 else false

andl l = foldl and true l
andr l = foldr and l true

Part1
andl (true::false::true::true::[])

CALL BY VALUE
  andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and true (false :: true :: true)
= foldl and (and true false) (true :: true :: [])
= foldl and false (true :: true :: [])
= foldl and (and false true) (true :: [])
= foldl and false (true :: [])
= foldl and (and false true) ([])
= foldl and false []
= false

CALL BY NAME
  andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and (and (and true true) false) (true :: true :: [])
= foldl and (and (and (and true true) false) true) (true :: [])
= foldl and (and (and (and (and true true) false) true) true) ([])
= and (and (and (and true true) false) true) true
= and (and (and true false) true) true)
= and (and false true) true)
= and false true
= false


Part2
andr (true::false::true::true::[])


CALL BY VALUE
  andr (true :: false :: true :: true :: [])
= foldr and (true :: false :: true :: true :: []) true
= and true (foldr and (false :: true :: true :: []) true)
= and true (and false (foldr and (true :: true :: []) true)
= and true (and false (and true (foldr and (true :: []) true) ) )
= and true (and false (and true (and true (foldr and [] true) ) ) )
= and true (and false (and true (and true true) ) )
= and true (and false (and true true) )
= and true (and false true)
= and true false
= false


CALL BY NAME
  andr (true :: false :: true :: true :: [])
= foldr and (true :: false :: true :: true :: []) true
= and true (foldr and (false :: true :: true :: []) true)
= foldr and (false :: true :: true :: []) true
= and false (foldr and (true::true::[]) true)
= false


The most efficient evaluation is andr's call by name evaluation.
The reason why this evaluation is most efficient is that we
evaluate each element in the list one by one and when we have a false
value in the list, we would get the result so quickly instead of evaluating
all the things in the list one by one. This will save a lot of time
